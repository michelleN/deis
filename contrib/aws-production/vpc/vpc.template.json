{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Production quality Deis VPC",
  "Parameters" : {
    "KeyPair" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "IamInstanceProfile" : {
      "Description" : "(Optional) Set IAM instance profile for bastion host (default: none)",
      "Type" : "String",
      "Default": ""
    },
    "SSHFrom" : {
      "Description" : "Lockdown SSH access to the bastion host (default: can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "NatInstanceType" : {
      "Description" : "EC2 instance type for NAT host (see http://aws.amazon.com/ec2/instance-types/)",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m3.medium",
        "m3.large"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "BastionInstanceType" : {
      "Description" : "EC2 instance type for bastion host (see http://aws.amazon.com/ec2/instance-types/)",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m3.medium",
        "m3.large"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "EC2VirtualizationType" : {
      "Description" : "EC2 AMI virtualization type for bastion host (see http://aws.amazon.com/amazon-linux-ami/instance-type-matrix/)",
      "Type": "String",
      "Default": "HVM",
      "AllowedValues" : [ "PV", "HVM" ],
      "ConstraintDescription" : "must be either PV or HVM"
    },
    "EC2EBSVolumeType" : {
      "Description" : "EC2 EBS VolumeType",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues" : [ "gp2", "standard" ],
      "ConstraintDescription" : "must be either 'gp2' for SSD or 'standard' for magnetic (provisioned iOPS requires further manual changes)"
    },
    "AssociatePublicIP": {
      "Description": "Whether to associate a public IP address to the hosts",
      "Type": "String",
      "Default": "false",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false"
    },
    "RootVolumeSize": {
      "Description": "Desired size of the root volume on the bastion host, in GB",
      "Type": "Number",
      "Default": "50"
    }
  },
  "Mappings" : {
    "NatAMIs" : {},
    "BastionAMIs" : {},
    "RootDevices" : {
      "HVM" : { "Name": "/dev/xvda" },
      "PV"  : { "Name": "/dev/sda" }
    },
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/16" },
      "PublicSubnet1" : { "CIDR" : "10.0.2.0/24" },
      "PublicSubnet2" : { "CIDR" : "10.0.4.0/24" },
      "PublicSubnet3" : { "CIDR" : "10.0.6.0/24" },
      "PrivateSubnet1" : { "CIDR" : "10.0.1.0/24" },
      "PrivateSubnet2" : { "CIDR" : "10.0.3.0/24" },
      "PrivateSubnet3" : { "CIDR" : "10.0.5.0/24" }
    }
  },
  "Conditions" : {
    "UseIamInstanceProfile" : {
      "Fn::Not" : [{
        "Fn::Equals" : [
          { "Ref" : "IamInstanceProfile" },
           ""
        ]
      }]
    }
  },
  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : "Deis" }
        ]
      }
    },
    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicSubnet1", "CIDR" ]}
      }
    },
    "PublicSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Fn::Select" : [ 1, { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicSubnet2", "CIDR" ]}
      }
    },
    "PublicSubnet3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Fn::Select" : [ 2, { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicSubnet3", "CIDR" ]}
      }
    },
    "PrivateSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PrivateSubnet1", "CIDR" ]}
      }
    },
    "PrivateSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Fn::Select" : [ 1, { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PrivateSubnet2", "CIDR" ]}
      }
    },
    "PrivateSubnet3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Fn::Select" : [ 2, { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PrivateSubnet3", "CIDR" ]}
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway"
    },
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "public" }
        ]
      }
    },
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "PublicSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet3" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC"},
        "Tags" : [
          { "Key" : "Network", "Value" : "private" }
        ]
      }
    },
    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NatHost" }
      }
    },
    "PrivateSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "PrivateSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "PrivateSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet3" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "NatSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enables ingress on all ports to the NAT server from the private subnets, and egress from there on all ports to the open internet",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]} }
        ]
      }
    },
    "NatHost" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "NatInstanceType" },
        "KeyName" : { "Ref" : "KeyPair" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "NatAMIs", { "Ref" : "AWS::Region" }, { "Ref" : "EC2VirtualizationType" }]},
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": {"Ref": "AssociatePublicIP"},
          "DeviceIndex": "0",
          "SubnetId": { "Ref" : "PublicSubnet1" },
          "GroupSet" : [ { "Ref" : "NatSecurityGroup" } ]
        } ],
        "Tags" : [
          { "Key" : "Name", "Value" : "nat" }
        ]
      }
    },
    "NatIpAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "InternetGateway",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "NatHost" }
       }
    },
    "BastionSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable public SSH",
        "SecurityGroupIngress" : [
          {"IpProtocol": "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHFrom" }}
        ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "BastionHost" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "BastionInstanceType" },
        "KeyName" : { "Ref" : "KeyPair" },
        "ImageId" : { "Fn::FindInMap" : [ "BastionAMIs", { "Ref" : "AWS::Region" }, { "Ref" : "EC2VirtualizationType" }]},
        "Tags" : [
          { "Key" : "Name", "Value" : "bastion" }
        ],
        "IamInstanceProfile" : {
          "Fn::If" : [
            "UseIamInstanceProfile",
            { "Ref" : "IamInstanceProfile" },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : { "Fn::FindInMap": [ "RootDevices", { "Ref": "EC2VirtualizationType" }, "Name" ] },
            "Ebs" : { "VolumeSize" : { "Ref": "RootVolumeSize" }, "VolumeType": { "Ref": "EC2EBSVolumeType" } }
          }
        ],
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": {"Ref": "AssociatePublicIP"},
          "DeviceIndex": "0",
          "SubnetId": { "Ref" : "PublicSubnet1" },
          "GroupSet" : [ { "Ref" : "BastionSecurityGroup" } ]
        } ]
      }
    },
    "BastionIpAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "InternetGateway",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "BastionHost" }
       }
    }
  },
  "Outputs" : {
    "VpcId" : {
      "Description" : "ID of the VPC",
      "Value" : { "Ref" : "VPC" }
    },
    "AvailabilityZone1" : {
      "Description" : "First of three AZs used in this VPC",
      "Value" :  { "Fn::GetAtt" : ["PublicSubnet1", "AvailabilityZone"] }
    },
    "AvailabilityZone2" : {
      "Description" : "Second of three AZs used in this VPC",
      "Value" :  { "Fn::GetAtt" : ["PublicSubnet2", "AvailabilityZone"] }
    },
    "AvailabilityZone3" : {
      "Description" : "Third of three AZs used in this VPC",
      "Value" :  { "Fn::GetAtt" : ["PublicSubnet3", "AvailabilityZone"] }
    },
    "PublicSubnet1Id" : {
      "Description" : "ID of the first of three public subnets",
      "Value" : { "Ref" : "PublicSubnet1" }
    },
    "PublicSubnet2Id" : {
      "Description" : "ID of the second of three public subnets",
      "Value" : { "Ref" : "PublicSubnet2" }
    },
    "PublicSubnet3Id" : {
      "Description" : "ID of the third of three public subnets",
      "Value" : { "Ref" : "PublicSubnet3" }
    },
    "PrivateSubnet1Id" : {
      "Description" : "ID of the first of three private subnets",
      "Value" : { "Ref" : "PrivateSubnet1" }
    },
    "PrivateSubnet2Id" : {
      "Description" : "ID of the second of three private subnets",
      "Value" : { "Ref" : "PrivateSubnet2" }
    },
    "PrivateSubnet3Id" : {
      "Description" : "ID of the third of three private subnets",
      "Value" : { "Ref" : "PrivateSubnet3" }
    },
    "BastionSecurityGroupId" : {
      "Description" : "ID of the bastion security group",
      "Value" : { "Ref" : "BastionSecurityGroup" }
    },
    "BastionElasticIp" : {
      "Description" : "The elastic IP associated with the bastion server",
      "Value" : { "Ref" : "BastionIpAddress" }
    }
  }
}
